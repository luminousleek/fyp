From 1441bc179796100de43cb65080691acca28b2090 Mon Sep 17 00:00:00 2001
From: Isaac Lee <68138671+luminousleek@users.noreply.github.com>
Date: Thu, 22 Feb 2024 13:25:01 +0800
Subject: [PATCH] implement trusted dma pta and driver

change type and fix bugs

enable trusted dma pta config

fix more pta bugs

enable config for dma driver

try to fix bugs in driver

try to fix driver bug again

remove util.h

add cast to paddr_t

hardcode dma base addr

move reg method out of function

hardcode mem addresses

register non secure memory

get pta to access secure mem

change dst phy addr
---
 core/arch/arm/plat-zynqmp/conf.mk     |   1 +
 core/drivers/sub.mk                   |   1 +
 core/drivers/zynqmp_dma.c             | 131 ++++++++++++++++++++++++++
 core/include/drivers/zynqmp_dma.h     |  68 +++++++++++++
 core/pta/sub.mk                       |   1 +
 core/pta/trusted_dma_pta.c            | 100 ++++++++++++++++++++
 lib/libutee/include/pta_trusted_dma.h |  22 +++++
 7 files changed, 324 insertions(+)
 create mode 100644 core/drivers/zynqmp_dma.c
 create mode 100644 core/include/drivers/zynqmp_dma.h
 create mode 100644 core/pta/trusted_dma_pta.c
 create mode 100644 lib/libutee/include/pta_trusted_dma.h

diff --git a/core/arch/arm/plat-zynqmp/conf.mk b/core/arch/arm/plat-zynqmp/conf.mk
index 4c0a33617..53ced2264 100644
--- a/core/arch/arm/plat-zynqmp/conf.mk
+++ b/core/arch/arm/plat-zynqmp/conf.mk
@@ -56,6 +56,7 @@ CFG_SHMEM_SIZE   ?= 0x10000000
 
 CFG_WITH_STATS ?= y
 CFG_CRYPTO_WITH_CE ?= y
+CFG_TRUSTED_DMA_PTA ?= y
 
 # Enable use of User AES eFuse as device key instead of PUF.
 # This is needed when images are encrypted with AES eFuse device key (AES_KEY).
diff --git a/core/drivers/sub.mk b/core/drivers/sub.mk
index 1b4c09c7c..e14e0ee90 100644
--- a/core/drivers/sub.mk
+++ b/core/drivers/sub.mk
@@ -60,6 +60,7 @@ srcs-$(CFG_ARM_SMCCC_TRNG) += smccc_trng.c
 srcs-$(CFG_VERSAL_GPIO) += versal_gpio.c
 srcs-$(CFG_VERSAL_MBOX) += versal_mbox.c
 srcs-$(CFG_VERSAL_PM) += versal_pm.c
+srcs-$(CFG_TRUSTED_DMA_PTA) += zynqmp_dma.c
 
 subdirs-y += crypto
 subdirs-$(CFG_BNXT_FW) += bnxt
diff --git a/core/drivers/zynqmp_dma.c b/core/drivers/zynqmp_dma.c
new file mode 100644
index 000000000..2983462b0
--- /dev/null
+++ b/core/drivers/zynqmp_dma.c
@@ -0,0 +1,131 @@
+#include <drivers/zynqmp_dma.h>
+#include <types_ext.h>
+#include <kernel/delay.h>
+#include <mm/core_memprot.h>
+
+register_ddr(SRC_PHY_ADDR, DMA_SIZE);
+register_phys_mem_pgdir(MEM_AREA_IO_SEC, TRUSTED_DMA_BASE_ADDR, DMA_SIZE);
+
+uint32_t write_dma(void *virtual_addr, uint32_t offset, uint32_t value)
+{
+    uint32_t* reg_addr = (uint32_t *) virtual_addr;
+    reg_addr[offset>>2] = value;
+
+    return 0;
+}
+
+uint32_t read_dma(void *virtual_addr, uint32_t offset)
+{
+    uint32_t* reg_addr = (uint32_t *) virtual_addr;
+    return reg_addr[offset>>2];
+}
+
+uint32_t reset_dma(void *dma_virtual_addr, enum dma_channel channel)
+{
+  if (channel == S2MM_CHANNEL) {
+    return write_dma(dma_virtual_addr, S2MM_CONTROL_REGISTER, RESET_DMA);
+  } else {
+    return write_dma(dma_virtual_addr, MM2S_CONTROL_REGISTER, RESET_DMA);
+  }
+}
+
+uint32_t halt_dma(void *dma_virtual_addr, enum dma_channel channel)
+{
+  if (channel == S2MM_CHANNEL) {
+    return write_dma(dma_virtual_addr, S2MM_CONTROL_REGISTER, HALT_DMA);
+  } else {
+    return write_dma(dma_virtual_addr, MM2S_CONTROL_REGISTER, HALT_DMA);
+  }
+}
+
+uint32_t enable_all_irq(void *dma_virtual_addr, enum dma_channel channel)
+{
+  if (channel == S2MM_CHANNEL) {
+    return write_dma(dma_virtual_addr, S2MM_CONTROL_REGISTER, ENABLE_ALL_IRQ);
+  } else {
+    return write_dma(dma_virtual_addr, MM2S_CONTROL_REGISTER, ENABLE_ALL_IRQ);
+  }
+}
+
+uint32_t run_dma(void *dma_virtual_addr, enum dma_channel channel)
+{
+  if (channel == S2MM_CHANNEL) {
+    return write_dma(dma_virtual_addr, S2MM_CONTROL_REGISTER, RUN_DMA);
+  } else {
+    return write_dma(dma_virtual_addr, MM2S_CONTROL_REGISTER, RUN_DMA);
+  }
+}
+
+uint32_t set_transfer_len(void *dma_virtual_addr, uint32_t length, enum dma_channel channel)
+{
+  if (channel == S2MM_CHANNEL) {
+    return write_dma(dma_virtual_addr, S2MM_BUFF_LENGTH_REGISTER, length);
+  } else {
+    return write_dma(dma_virtual_addr, MM2S_TRNSFR_LENGTH_REGISTER, length);
+  }
+}
+
+uint32_t read_dma_status(void *dma_virtual_addr, enum dma_channel channel) 
+{
+  if (channel == S2MM_CHANNEL) {
+    return read_dma(dma_virtual_addr, S2MM_STATUS_REGISTER);
+  } else {
+    return read_dma(dma_virtual_addr, MM2S_STATUS_REGISTER);
+  }
+}
+
+uint32_t set_transfer_mem_addr(void *dma_virtual_addr, enum dma_channel channel)
+{
+  if (channel == S2MM_CHANNEL) {
+    return write_dma(dma_virtual_addr, S2MM_DST_ADDRESS_REGISTER, DST_PHY_ADDR);
+  } else {
+    return write_dma(dma_virtual_addr, MM2S_SRC_ADDRESS_REGISTER, SRC_PHY_ADDR);
+  }
+}
+
+TEE_Result dma_init(enum dma_channel channel)
+{
+  void* dma_virtual_addr = (void *) core_mmu_get_va((paddr_t) TRUSTED_DMA_BASE_ADDR, MEM_AREA_IO_SEC, DMA_SIZE);
+
+  if (!dma_virtual_addr)
+    return TEE_ERROR_GENERIC;
+
+  reset_dma(dma_virtual_addr, channel);
+  halt_dma(dma_virtual_addr, channel);
+  enable_all_irq(dma_virtual_addr, channel);
+
+  return TEE_SUCCESS;
+}
+
+TEE_Result dma_sync(enum dma_channel channel)
+{
+  void* dma_virtual_addr = (void *) core_mmu_get_va((paddr_t) TRUSTED_DMA_BASE_ADDR, MEM_AREA_IO_SEC, DMA_SIZE);
+  uint64_t tref = timeout_init_us(DMA_DONE_TIMEOUT_USEC);
+  uint32_t status = 0;
+
+  if (!dma_virtual_addr)
+    return TEE_ERROR_GENERIC;
+  
+  while (!timeout_elapsed(tref)) {
+    status = read_dma_status(dma_virtual_addr, channel);
+    if ((status & IOC_IRQ_FLAG) && (status & IDLE_FLAG)) {
+      return TEE_SUCCESS;
+    }
+  }
+
+  return TEE_ERROR_GENERIC;
+}
+
+TEE_Result dma_transfer(uint32_t length, enum dma_channel channel)
+{
+  void* dma_virtual_addr = (void *) core_mmu_get_va((paddr_t) TRUSTED_DMA_BASE_ADDR, MEM_AREA_IO_SEC, DMA_SIZE);
+
+  if (!dma_virtual_addr)
+    return TEE_ERROR_GENERIC;
+
+  set_transfer_mem_addr(dma_virtual_addr, channel);
+  run_dma(dma_virtual_addr, channel);
+  set_transfer_len(dma_virtual_addr, length, channel);
+
+  return TEE_SUCCESS;
+}
diff --git a/core/include/drivers/zynqmp_dma.h b/core/include/drivers/zynqmp_dma.h
new file mode 100644
index 000000000..9bc6ab8f5
--- /dev/null
+++ b/core/include/drivers/zynqmp_dma.h
@@ -0,0 +1,68 @@
+#include <tee_api_types.h>
+
+#ifndef __DRIVERS_ZYNQMP_DMA_H_
+#define __DRIVERS_ZYNQMP_DMA_H_
+
+enum dma_channel {
+  S2MM_CHANNEL = 0,
+  MM2S_CHANNEL = 1
+};
+
+/* DMA registers */
+#define MM2S_CONTROL_REGISTER       0x00
+#define MM2S_STATUS_REGISTER        0x04
+#define MM2S_SRC_ADDRESS_REGISTER   0x18
+#define MM2S_TRNSFR_LENGTH_REGISTER 0x28
+
+#define S2MM_CONTROL_REGISTER       0x30
+#define S2MM_STATUS_REGISTER        0x34
+#define S2MM_DST_ADDRESS_REGISTER   0x48
+#define S2MM_BUFF_LENGTH_REGISTER   0x58
+
+#define IOC_IRQ_FLAG                1<<12
+#define IDLE_FLAG                   1<<1
+
+#define STATUS_HALTED               0x00000001
+#define STATUS_IDLE                 0x00000002
+#define STATUS_SG_INCLDED           0x00000008
+#define STATUS_DMA_INTERNAL_ERR     0x00000010
+#define STATUS_DMA_SLAVE_ERR        0x00000020
+#define STATUS_DMA_DECODE_ERR       0x00000040
+#define STATUS_SG_INTERNAL_ERR      0x00000100
+#define STATUS_SG_SLAVE_ERR         0x00000200
+#define STATUS_SG_DECODE_ERR        0x00000400
+#define STATUS_IOC_IRQ              0x00001000
+#define STATUS_DELAY_IRQ            0x00002000
+#define STATUS_ERR_IRQ              0x00004000
+
+#define HALT_DMA                    0x00000000
+#define RUN_DMA                     0x00000001
+#define RESET_DMA                   0x00000004
+#define ENABLE_IOC_IRQ              0x00001000
+#define ENABLE_DELAY_IRQ            0x00002000
+#define ENABLE_ERR_IRQ              0x00004000
+#define ENABLE_ALL_IRQ              0x00007000
+
+#define DMA_SIZE                    0x10000
+#define DMA_DONE_TIMEOUT_USEC       3000000
+
+#define TRUSTED_DMA_BASE_ADDR       0xA0000000
+#define SRC_PHY_ADDR                0x40000000
+#define SECURE_MEM_PHY_ADDR         0x30000000
+#define DST_PHY_ADDR                0x50000000
+
+uint32_t write_dma(void *virtual_addr, uint32_t offset, uint32_t value);
+uint32_t read_dma(void *virtual_addr, uint32_t offset);
+uint32_t reset_dma(void *dma_virtual_addr, enum dma_channel channel);
+uint32_t halt_dma(void *dma_virtual_addr, enum dma_channel channel);
+uint32_t enable_all_irq(void *dma_virtual_addr, enum dma_channel channel);
+uint32_t run_dma(void *dma_virtual_addr, enum dma_channel channel);
+uint32_t set_transfer_len(void *dma_virtual_addr, uint32_t length, enum dma_channel channel);
+uint32_t read_dma_status(void *dma_virtual_addr, enum dma_channel channel);
+uint32_t set_transfer_mem_addr(void *dma_virtual_addr, enum dma_channel channel);
+
+TEE_Result dma_init(enum dma_channel channel);
+TEE_Result dma_sync(enum dma_channel channel);
+TEE_Result dma_transfer(uint32_t length, enum dma_channel channel);
+
+#endif
\ No newline at end of file
diff --git a/core/pta/sub.mk b/core/pta/sub.mk
index a20bc6c29..2e5b49059 100644
--- a/core/pta/sub.mk
+++ b/core/pta/sub.mk
@@ -14,5 +14,6 @@ srcs-$(CFG_APDU_PTA) += apdu.c
 srcs-$(CFG_SCMI_PTA) += scmi.c
 srcs-$(CFG_HWRNG_PTA) += hwrng.c
 srcs-$(CFG_RTC_PTA) += rtc.c
+srcs-$(CFG_TRUSTED_DMA_PTA) += trusted_dma_pta.c
 
 subdirs-y += bcm
diff --git a/core/pta/trusted_dma_pta.c b/core/pta/trusted_dma_pta.c
new file mode 100644
index 000000000..b931e451b
--- /dev/null
+++ b/core/pta/trusted_dma_pta.c
@@ -0,0 +1,100 @@
+#include <kernel/pseudo_ta.h>
+#include <drivers/zynqmp_dma.h>
+#include <mm/core_memprot.h>
+#include <pta_trusted_dma.h>
+#include <tee_api_defines.h>
+#include <tee_api_types.h>
+#include <trace.h>
+
+#define PTA_NAME "trusted_dma.pta"
+
+static TEE_Result pta_cmd_trusted_dma_init(uint32_t param_types, TEE_Param params [TEE_NUM_PARAMS])
+{
+  enum dma_channel channel;
+  const uint32_t exp_pt = TEE_PARAM_TYPES(TEE_PARAM_TYPE_VALUE_INPUT,
+						TEE_PARAM_TYPE_NONE,
+						TEE_PARAM_TYPE_NONE,
+						TEE_PARAM_TYPE_NONE);
+
+  if (param_types != exp_pt)
+    return TEE_ERROR_BAD_PARAMETERS;
+
+  channel = (params[0].value.a == 1) ? MM2S_CHANNEL : S2MM_CHANNEL;
+
+  return dma_init(channel);
+}
+
+static TEE_Result pta_cmd_trusted_dma_sync(uint32_t param_types, TEE_Param params [TEE_NUM_PARAMS])
+{
+  enum dma_channel channel;
+  const uint32_t exp_pt = TEE_PARAM_TYPES(TEE_PARAM_TYPE_VALUE_INPUT,
+						TEE_PARAM_TYPE_NONE,
+						TEE_PARAM_TYPE_NONE,
+						TEE_PARAM_TYPE_NONE);
+
+  if (param_types != exp_pt)
+    return TEE_ERROR_BAD_PARAMETERS;
+
+  channel = (params[0].value.a == 1) ? MM2S_CHANNEL : S2MM_CHANNEL;
+
+  return dma_sync(channel);
+}
+
+static TEE_Result pta_cmd_trusted_dma_transfer(uint32_t param_types, TEE_Param params [TEE_NUM_PARAMS])
+{
+  uint32_t transfer_length;
+  enum dma_channel channel;
+  const uint32_t exp_pt = TEE_PARAM_TYPES(TEE_PARAM_TYPE_VALUE_INPUT,
+						TEE_PARAM_TYPE_VALUE_INPUT,
+						TEE_PARAM_TYPE_NONE,
+						TEE_PARAM_TYPE_NONE);
+
+  if (param_types != exp_pt)
+    return TEE_ERROR_BAD_PARAMETERS;
+
+  transfer_length = params[0].value.a;
+  channel = (params[1].value.a == 1) ? MM2S_CHANNEL : S2MM_CHANNEL;
+
+  return dma_transfer(transfer_length, channel);
+}
+
+static TEE_Result pta_cmd_trusted_dma_read(uint32_t param_types, TEE_Param params [TEE_NUM_PARAMS])
+{
+  uint32_t length;
+  const uint32_t exp_pt = TEE_PARAM_TYPES(TEE_PARAM_TYPE_VALUE_INPUT,
+						TEE_PARAM_TYPE_MEMREF_OUTPUT,
+						TEE_PARAM_TYPE_NONE,
+						TEE_PARAM_TYPE_NONE);
+
+  if (param_types != exp_pt)
+    return TEE_ERROR_BAD_PARAMETERS;
+
+  length = params[0].value.a;
+  params[1].memref.buffer = phys_to_virt(SECURE_MEM_PHY_ADDR, MEM_AREA_TEE_RAM, length);
+  params[1].memref.size = length;
+
+  return TEE_SUCCESS;
+}
+
+TEE_Result invoke_command(void *session __unused, uint32_t cmd_id,
+				      uint32_t param_types,
+				      TEE_Param params[TEE_NUM_PARAMS])
+{
+	switch (cmd_id) {
+  case PTA_CMD_TRUSTED_DMA_INIT:
+    return pta_cmd_trusted_dma_init(param_types, params);
+	case PTA_CMD_TRUSTED_DMA_SYNC:
+		return pta_cmd_trusted_dma_sync(param_types, params);
+	case PTA_CMD_TRUSTED_DMA_TRANSFER:
+		return pta_cmd_trusted_dma_transfer(param_types, params);
+  case PTA_CMD_TRUSTED_DMA_READ:
+    return pta_cmd_trusted_dma_read(param_types, params);
+	default:
+		EMSG("Command ID %#" PRIx32 " is not supported", cmd_id);
+		return TEE_ERROR_NOT_SUPPORTED;
+	}
+}
+
+pseudo_ta_register(.uuid = PTA_TRUSTED_DMA_UUID, .name = PTA_NAME,
+    .flags = PTA_DEFAULT_FLAGS,
+    .invoke_command_entry_point = invoke_command);
diff --git a/lib/libutee/include/pta_trusted_dma.h b/lib/libutee/include/pta_trusted_dma.h
new file mode 100644
index 000000000..2f179ee4f
--- /dev/null
+++ b/lib/libutee/include/pta_trusted_dma.h
@@ -0,0 +1,22 @@
+
+
+#ifndef __PTA_TRUSTED_DMA_H
+#define __PTA_TRUSTED_DMA_H
+
+/*
+ * identifier of the pta
+ */
+
+#define PTA_TRUSTED_DMA_UUID \
+	{ 0xe1429e6f, 0xd436, 0x4c53, \
+		{ 0xbe, 0x3b, 0x9e, 0x15, 0x36, 0x50, 0xe6, 0x1f} }
+
+/*
+ * commands
+ */
+#define PTA_CMD_TRUSTED_DMA_INIT     0x0100
+#define PTA_CMD_TRUSTED_DMA_TRANSFER 0x0101
+#define PTA_CMD_TRUSTED_DMA_SYNC     0x0102
+#define PTA_CMD_TRUSTED_DMA_READ     0x0103
+
+#endif /*__PTA_TRUSTED_DMA_H*/
-- 
2.34.1

